-- Final, Corrected Supabase Schema for Fichaje App
-- Version 2.0

-- Drop existing objects if they exist, in reverse order of dependency
DROP TABLE IF EXISTS public.employee_client_assignments CASCADE;
DROP TABLE IF EXISTS public.incidents CASCADE;
DROP TABLE IF EXISTS public.incident_types CASCADE;
DROP TABLE IF EXISTS public.time_entries CASCADE;
DROP TABLE IF EXISTS public.requests CASCADE;
DROP TABLE IF EXISTS public.holidays CASCADE;
DROP TABLE IF EXISTS public.clients CASCADE;
DROP TABLE IF EXISTS public.employees CASCADE;
DROP TABLE IF EXISTS public.departments CASCADE;
DROP TABLE IF EXISTS public.schedules CASCADE;
DROP TABLE IF EXISTS public.companies CASCADE;
DROP TABLE IF EXISTS public.absence_types CASCADE;
DROP TYPE IF EXISTS public.action_type CASCADE;
DROP TYPE IF EXISTS public.request_type CASCADE;
DROP TYPE IF EXISTS public.request_status CASCADE;
DROP TYPE IF EXISTS public.schedule_type CASCADE;
DROP TYPE IF EXISTS public.incident_status CASCADE;
DROP FUNCTION IF EXISTS public.get_company_id(uuid);

-- 1. Create Tables

-- Companies Table: Stores information about each client company
CREATE TABLE public.companies (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    name text NOT NULL,
    has_clients_module boolean DEFAULT false NOT NULL,
    CONSTRAINT companies_name_unique UNIQUE (name)
);
COMMENT ON TABLE public.companies IS 'Stores information about each client company using the SaaS.';

-- Departments Table: Stores departments for each company
CREATE TABLE public.departments (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    manager_name text,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    CONSTRAINT departments_name_company_unique UNIQUE (name, company_id)
);
COMMENT ON TABLE public.departments IS 'Stores department information for each company.';

-- Schedules Table: Stores work schedule templates
CREATE TABLE public.schedules (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    name text NOT NULL,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    schedule_type text NOT NULL,
    hours_per_week numeric(4, 2) NOT NULL,
    details jsonb,
    CONSTRAINT schedules_name_company_unique UNIQUE (name, company_id)
);
COMMENT ON TABLE public.schedules IS 'Defines different work schedule templates for a company.';

-- Employees Table: Links to Supabase Auth users, holds employee data
CREATE TABLE public.employees (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamptz DEFAULT now() NOT NULL,
    full_name text NOT NULL,
    pin text NOT NULL,
    role text NOT NULL,
    vacation_days integer DEFAULT 22 NOT NULL,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    department_id bigint REFERENCES public.departments(id) ON DELETE SET NULL,
    schedule_id bigint REFERENCES public.schedules(id) ON DELETE SET NULL
);
COMMENT ON TABLE public.employees IS 'Stores employee-specific data, linked to an authentication user.';

-- Clients Table: Stores clients of the companies using the SaaS
CREATE TABLE public.clients (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    contact_person text,
    contact_email text,
    created_at timestamptz DEFAULT now() NOT NULL,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    CONSTRAINT clients_name_company_unique UNIQUE (name, company_id)
);
COMMENT ON TABLE public.clients IS 'Stores clients for companies that have the clients module enabled.';

-- Employee-Client Assignment Table: Many-to-many relationship
CREATE TABLE public.employee_client_assignments (
    employee_id uuid NOT NULL REFERENCES public.employees(id) ON DELETE CASCADE,
    client_id bigint NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    PRIMARY KEY (employee_id, client_id)
);
COMMENT ON TABLE public.employee_client_assignments IS 'Assigns employees to work on specific clients.';

-- Time Entries Table: Records all clock-in/out actions
CREATE TYPE public.action_type AS ENUM ('Entrada', 'Pausa', 'Reanudar', 'Salida');
CREATE TABLE public.time_entries (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    employee_id uuid NOT NULL REFERENCES public.employees (id) ON DELETE CASCADE,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    employee_name text NOT NULL,
    client_name text,
    action public.action_type NOT NULL
);
COMMENT ON TABLE public.time_entries IS 'Records every clock-in, pause, resume, and clock-out action.';

-- Requests Table: For vacation, leave, etc.
CREATE TABLE public.requests (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    employee_id uuid NOT NULL REFERENCES public.employees (id) ON DELETE CASCADE,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    employee_name text NOT NULL,
    request_type text NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    comments text,
    status text DEFAULT 'Pendiente' NOT NULL
);
COMMENT ON TABLE public.requests IS 'Stores employee requests for time off, etc.';

-- Holidays Table: Company-specific holidays
CREATE TABLE public.holidays (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    date date NOT NULL,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    CONSTRAINT holidays_date_company_unique UNIQUE (date, company_id)
);
COMMENT ON TABLE public.holidays IS 'Stores company-specific holidays.';

-- Absence Types Table: Configurable types of absences
CREATE TABLE public.absence_types (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    requires_document boolean DEFAULT false NOT NULL,
    paid boolean DEFAULT false NOT NULL,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    CONSTRAINT absence_types_name_company_unique UNIQUE (name, company_id)
);
COMMENT ON TABLE public.absence_types IS 'Defines the types of absences a company can have.';

-- Incident Types Table: Configurable types of incidents
CREATE TABLE public.incident_types (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    CONSTRAINT incident_types_name_company_unique UNIQUE (name, company_id)
);
COMMENT ON TABLE public.incident_types IS 'Defines the types of incidents a company can track.';

-- Incidents Table: Records specific employee incidents
CREATE TABLE public.incidents (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz DEFAULT now() NOT NULL,
    employee_id uuid NOT NULL REFERENCES public.employees (id) ON DELETE CASCADE,
    company_id bigint NOT NULL REFERENCES public.companies(id) ON DELETE CASCADE,
    incident_type_id bigint NOT NULL REFERENCES public.incident_types (id) ON DELETE RESTRICT,
    date date NOT NULL,
    description text,
    status text DEFAULT 'Pendiente de Revisi√≥n' NOT NULL
);
COMMENT ON TABLE public.incidents IS 'Records specific employee incidents.';


-- 2. Row Level Security (RLS)

-- Helper function to get the company_id for the currently authenticated user
CREATE OR REPLACE FUNCTION public.get_company_id(user_id uuid)
RETURNS bigint
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT company_id FROM public.employees WHERE id = user_id;
$$;

-- Helper function to check if a user is a Super Admin
CREATE OR REPLACE FUNCTION public.is_super_admin(user_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
    SELECT EXISTS (
        SELECT 1 FROM public.employees WHERE id = user_id AND role = 'Super Admin'
    );
$$;

-- Enable RLS on all tables
ALTER TABLE public.companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.departments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.employee_client_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.time_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.holidays ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.absence_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.incident_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.incidents ENABLE ROW LEVEL SECURITY;

-- RLS Policies

-- Companies: Super Admins can see all, others can see their own.
CREATE POLICY "Allow read access to own company" ON public.companies FOR SELECT USING (id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow Super Admin full access" ON public.companies FOR ALL USING (public.is_super_admin(auth.uid())) WITH CHECK (public.is_super_admin(auth.uid()));

-- Employees: Users can see themselves. HR Managers can see everyone in their company. Super Admins see all.
CREATE POLICY "Allow read access to own employee record" ON public.employees FOR SELECT USING (id = auth.uid());
CREATE POLICY "Allow HR to read employees in their company" ON public.employees FOR SELECT USING (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow HR to manage employees in their company" ON public.employees FOR ALL USING (company_id = public.get_company_id(auth.uid()) AND (SELECT role FROM employees WHERE id = auth.uid()) = 'Gestor de RRHH') WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow Super Admin full access" ON public.employees FOR ALL USING (public.is_super_admin(auth.uid())) WITH CHECK (public.is_super_admin(auth.uid()));

-- Generic Company-Scoped Policy: Applies to most tables
CREATE POLICY "Allow full access based on company_id" ON public.departments FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow full access based on company_id" ON public.schedules FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow full access based on company_id" ON public.clients FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow full access based on company_id" ON public.holidays FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow full access based on company_id" ON public.absence_types FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow full access based on company_id" ON public.incident_types FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));

-- Super Admin override for company-scoped tables
CREATE POLICY "Allow Super Admin full access" ON public.departments FOR ALL USING (public.is_super_admin(auth.uid())) WITH CHECK (public.is_super_admin(auth.uid()));
-- (Repeat for schedules, clients, holidays, absence_types, incident_types)

-- Time Entries: Employees can create their own. HR can see all in the company.
CREATE POLICY "Allow employee to create own time entries" ON public.time_entries FOR INSERT WITH CHECK (employee_id = auth.uid() AND company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow HR to read all time entries in company" ON public.time_entries FOR SELECT USING (company_id = public.get_company_id(auth.uid()));

-- Requests: Employees can manage their own. HR can see all in the company.
CREATE POLICY "Allow employee to manage own requests" ON public.requests FOR ALL USING (employee_id = auth.uid()) WITH CHECK (employee_id = auth.uid() AND company_id = public.get_company_id(auth.uid()));
CREATE POLICY "Allow HR to manage all requests in company" ON public.requests FOR ALL USING (company_id = public.get_company_id(auth.uid()) AND (SELECT role FROM employees WHERE id = auth.uid()) = 'Gestor de RRHH') WITH CHECK (company_id = public.get_company_id(auth.uid()));

-- Incidents: HR can manage all in the company.
CREATE POLICY "Allow HR to manage incidents in company" ON public.incidents FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));

-- Assignments: HR can manage assignments in the company.
CREATE POLICY "Allow HR to manage assignments in company" ON public.employee_client_assignments FOR ALL USING (company_id = public.get_company_id(auth.uid())) WITH CHECK (company_id = public.get_company_id(auth.uid()));

-- 3. Seed Data (Optional, for development)
-- Example of creating a Super Admin user
-- This would be done manually or via a secure backend process in production
-- INSERT INTO public.companies (name) VALUES ('Super Admin Company');
-- INSERT INTO public.employees (id, full_name, pin, role, company_id) VALUES ('<super-admin-auth-user-id>', 'Super Admin', '0000', 'Super Admin', 1);

-- Make sure to set the corresponding password in Supabase Auth UI.
-- The PIN should be hashed in a real application.
-- The 'id' must match the auth.users.id for the super admin.
